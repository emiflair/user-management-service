# Docker Environment Configuration Template
#
# Copy this file to .env and update the values for your deployment.
# This file contains all the environment variables needed for Docker deployment.
#
# IMPORTANT: Never commit the actual .env file to version control!
# Add .env to your .gitignore file to prevent accidental commits.

# =============================================================================
# APPLICATION CONFIGURATION
# =============================================================================

# Node.js Environment
# Options: development, test, production
NODE_ENV=production

# Server Port
# The port your application will listen on inside the container
PORT=5000

# =============================================================================
# DATABASE CONFIGURATION
# =============================================================================

# MongoDB Connection String
# For Docker Compose: use the service name 'mongo' as hostname
# For external MongoDB: use the actual hostname/IP
MONGO_URI=mongodb://mongo:27017/user-service

# =============================================================================
# SECURITY CONFIGURATION
# =============================================================================

# JWT Secret Key
# IMPORTANT: Use a strong, random secret in production (minimum 32 characters)
# Generate with: openssl rand -base64 32
JWT_SECRET=your_super_secure_jwt_secret_key_here_change_me_in_production

# JWT Token Expiration
# Examples: 15m, 1h, 1d, 7d
JWT_EXPIRES_IN=1h

# Bcrypt Salt Rounds
# Higher values = more secure but slower (10-12 recommended for production)
BCRYPT_SALT_ROUNDS=12

# =============================================================================
# CORS CONFIGURATION
# =============================================================================

# CORS Origin
# For production: specify exact origins like https://yourdomain.com
# For development: use * (allow all origins)
CORS_ORIGIN=*

# =============================================================================
# RATE LIMITING CONFIGURATION
# =============================================================================

# Rate Limit Window (in milliseconds)
# 15 minutes = 900000ms, 1 hour = 3600000ms
RATE_LIMIT_WINDOW_MS=900000

# Maximum Requests per Window
# Adjust based on your application's expected traffic
RATE_LIMIT_MAX=100

# =============================================================================
# MONGODB CONFIGURATION (for docker-compose.yml)
# =============================================================================

# MongoDB Root User (for MongoDB container initialization)
MONGO_INITDB_ROOT_USERNAME=admin

# MongoDB Root Password (for MongoDB container initialization)
# IMPORTANT: Use a strong password in production
MONGO_INITDB_ROOT_PASSWORD=your_secure_mongo_password_change_me

# MongoDB Database Name
MONGO_INITDB_DATABASE=user-service

# =============================================================================
# DOCKER COMPOSE CONFIGURATION
# =============================================================================

# Application Container Name
COMPOSE_PROJECT_NAME=user-management-service

# MongoDB Container External Port (comment out in production for security)
MONGO_EXTERNAL_PORT=27017

# Application External Port
APP_EXTERNAL_PORT=5000

# =============================================================================
# LOGGING CONFIGURATION
# =============================================================================

# Log Level
# Options: error, warn, info, http, verbose, debug, silly
LOG_LEVEL=info

# =============================================================================
# PRODUCTION DEPLOYMENT NOTES
# =============================================================================
#
# For production deployment:
#
# 1. Change all default passwords and secrets
# 2. Use strong JWT secrets (generate with: openssl rand -base64 32)
# 3. Restrict CORS_ORIGIN to your actual domain(s)
# 4. Comment out MongoDB external port mapping for security
# 5. Use environment-specific values for rate limiting
# 6. Consider using Docker secrets for sensitive values
# 7. Enable SSL/TLS termination at load balancer or reverse proxy
# 8. Set up proper backup strategies for MongoDB data
# 9. Configure log aggregation and monitoring
# 10. Review and adjust resource limits in docker-compose.yml
#
# =============================================================================